#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map { |l| l.chars.map(&:to_i) }
  trailheads = positions_for_symbol(grid, 0).map do |x, y|
    { start: [x, y], current: [x, y], next: 1 }
  end
  complete_paths = complete_paths_for_trailheads(grid, trailheads)
  res = complete_paths.map { |path| [path[:start], path[:current]] }.uniq.size
  puts "Answer Part 1: #{res}"
end

def positions_for_symbol(grid, symbol)
  positions = []
  grid.each_with_index do |row, y|
    row.each_with_index do |cell, x|
      positions << [x, y] if cell == symbol
    end
  end
  positions
end

def complete_paths_for_trailheads(grid, paths)
  complete_paths = []
  until paths.empty?
    path = paths.shift
    x, y = path[:current]
    candidate_positions = positions_around grid, x, y, path[:next]
    candidate_positions.each do |cx, cy|
      if grid[cy][cx] == 9
        complete_paths << { start: path[:start], current: [cx, cy], next: 10 }
      else
        paths << { start: path[:start], current: [cx, cy], next: grid[cy][cx] + 1 }
      end
    end
  end
  complete_paths
end

def positions_around(grid, x, y, symbol)
  positions = []
  positions << [x, y - 1] if y > 0 && grid[y - 1][x] == symbol
  positions << [x, y + 1] if y < (grid.size - 1) && grid[y + 1][x] == symbol
  positions << [x - 1, y] if x > 0 && grid[y][x - 1] == symbol
  positions << [x + 1, y] if x < (grid[y].size - 1) && grid[y][x + 1] == symbol
  positions
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map { |l| l.chars.map(&:to_i) }
  trailheads = positions_for_symbol(grid, 0).map do |x, y|
    { start: [x, y], current: [x, y], next: 1 }
  end
  complete_paths = complete_paths_for_trailheads(grid, trailheads)
  res = complete_paths.size
  puts "Answer Part 2: #{res}"
end

