#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  s = input.split("\n\n")
  rules = s[0].split("\n").map { |r| r.split("|").map(&:to_i) }
  updates = s[1].split("\n").map { |u| u.split(",").map(&:to_i) }
  correct_updates = updates.select { |update| respects_rules?(update, rules) }
  res = correct_updates.map { |u| u[(u.size-1) / 2]}.sum
  puts "Answer Part 1: #{res}"
end

def respects_rules?(update, rules)
  update.each do |page|
    applicable_rules = rules.select { |r| r[0] == page }
    applicable_rules.each do |rule|
      return false if update.index(rule[1]) && update.index(page) > update.index(rule[1])
    end
  end
  true
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  s = input.split("\n\n")
  rules = s[0].split("\n").map { |r| r.split("|").map(&:to_i) }
  updates = s[1].split("\n").map { |u| u.split(",").map(&:to_i) }
  incorrect_updates = updates.reject { |update| respects_rules?(update, rules) }
  corrected_updates = incorrect_updates.map { |update| correct_update(update, rules) }
  res = corrected_updates.map { |u| u[(u.size-1) / 2]}.sum
  puts "Answer Part 2: #{res}"
end

def correct_update(update, rules)
  update.each do |page|
    applicable_rules = rules.select { |r| r[0] == page }
    applicable_rules.each do |rule|
      if update.index(rule[1]) && update.index(page) > update.index(rule[1])
        update.delete(page)
        insert_at = update.index(rule[1])
        # p "inserting #{page} at #{insert_at} because rule #{rule}"
        update.insert(insert_at, page)
      end
    end
  end
  update
end
