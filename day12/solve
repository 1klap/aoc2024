#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  positions_by_symbol = positions_for_symbol(grid)
  closed_patches_by_symbol = closed_patches(positions_by_symbol)
  res = closed_patches_by_symbol.values.map do |patches|
    patches.map do |patch|
      perimeter_for_patch(patch) * patch[:positions].size
    end.sum
  end.sum
  puts "Answer Part 1: #{res}"
end

def positions_for_symbol(grid)
  positions_by_symbol = {}
  grid.each_with_index do |row, y|
    row.each_with_index do |cell, x|
      positions_by_symbol[cell] ||= []
      positions_by_symbol[cell] << [x, y]
    end
  end
  positions_by_symbol
end

def closed_patches(positions_by_symbol)
  closed_patches = {}
  positions_by_symbol.each do |symbol, unclaimed_postions|
    # p "SYMBOL: #{symbol}"
    patches_for_symbol = []
    until unclaimed_postions.empty?
      grow_patch_or_add_new_one(patches_for_symbol, unclaimed_postions)
    end
    closed_patches[symbol] = patches_for_symbol
  end
  closed_patches
end

def grow_patch_or_add_new_one(patches, unclaimed_positions)
  grew_any_patch = patches.select { |p| p[:open] }.any? do |open_patch|
    grew_patch = unclaimed_positions.any? do |position|
      if patch_can_reach_position?(open_patch, position)
        open_patch[:positions] << position
        unclaimed_positions.delete(position)
        true
      else
        false
      end
    end
    open_patch[:open] = false unless grew_patch
    grew_patch
  end
  patches << { positions: [unclaimed_positions.shift], open: true } unless grew_any_patch
end

def patch_can_reach_position?(patch, position)
  patch[:positions].any? do |patch_position|
    (patch_position[0] - position[0]).abs + (patch_position[1] - position[1]).abs == 1
  end
end

def perimeter_for_patch(patch)
  patch[:positions].map { |s| perimeter_for_position(s, patch[:positions]) }.sum
end

def perimeter_for_position(position, positions)
  x = position[0]
  y = position[1]
  (positions.any? { |s| s[0] == x - 1 && s[1] == y } ? 0 : 1) +
    (positions.any? { |s| s[0] == x + 1 && s[1] == y } ? 0 : 1) +
    (positions.any? { |s| s[0] == x && s[1] == y - 1 } ? 0 : 1) +
    (positions.any? { |s| s[0] == x && s[1] == y + 1 } ? 0 : 1)

end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  positions_by_symbol = positions_for_symbol(grid)
  closed_patches_by_symbol = closed_patches(positions_by_symbol)
  res = closed_patches_by_symbol.values.map do |patches|
    patches.map do |patch|
      sides_for_patch(patch) * patch[:positions].size
    end.sum
  end.sum
  puts "Answer Part 2: #{res}"
end

def sides_for_patch(patch)
  sides = [{ direction: :top, group_coord_index: 1, chunk_coord_index: 0 },
           { direction: :bottom, group_coord_index: 1, chunk_coord_index: 0 },
           { direction: :left, group_coord_index: 0, chunk_coord_index: 1 },
           { direction: :right, group_coord_index: 0, chunk_coord_index: 1 }]
  sides.map do |side|
    patch[:positions].select { |s| has_border?(s, patch[:positions], side[:direction]) }
                     .group_by { |s| s[side[:group_coord_index]] }
                     .values
                     .map { |positions| continous_chunk_count(positions.map { |s| s[side[:chunk_coord_index]] }) }
                     .sum
  end.sum
end

def has_border?(position, positions, direction)
  x = position[0]
  y = position[1]
  case direction
  when :left
    positions.none? { |s| s[0] == x - 1 && s[1] == y }
  when :right
    positions.none? { |s| s[0] == x + 1 && s[1] == y }
  when :top
    positions.none? { |s| s[0] == x && s[1] == y - 1 }
  when :bottom
    positions.none? { |s| s[0] == x && s[1] == y + 1 }
  else
    false
  end
end

def continous_chunk_count(array)
  array.sort.chunk_while { |i, j| i + 1 == j }.count
end

