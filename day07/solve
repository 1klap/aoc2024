#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  equations = input.split("\n")
               .map { |line|
                 s = line.split(":")
                 { result: s[0].to_i, operands: s[1].split(" ").map(&:to_i) }
               }
  valid_equations = equations.select { |eq| operators_exist? eq, ["+", "*"] }
  res = valid_equations.map { |eq| eq[:result] }.sum
  puts "Answer Part 1: #{res}"
end

def operators_exist?(eq, operators)
  operator_count = eq[:operands].size - 1
  operators.repeated_permutation(operator_count).any? do |op|
    res = calculate(eq[:operands].dup, op.dup)
    # p "MATCH: eq: #{eq}, op: #{op}, res: #{res}" if res == eq[:result]
    eq[:result] == res
  end
end

def calculate(operands, operators)
  current = operands.shift
  while operands.any?
    operator = operators.shift
    operand = operands.shift
    if operator == "||"
      current = (current.to_s + operand.to_s).to_i
    else
      current = current.send(operator, operand)
    end
  end
  current
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  equations = input.split("\n")
                   .map { |line|
                     s = line.split(":")
                     { result: s[0].to_i, operands: s[1].split(" ").map(&:to_i) }
                   }
  valid_equations = equations.select { |eq| operators_exist? eq, ["+", "*", "||"] }
  res = valid_equations.map { |eq| eq[:result] }.sum
  puts "Answer Part 2: #{res}"
end

