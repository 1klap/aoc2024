#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  cursor = find_starting_cursor(grid)
  grid[cursor[:position][1]][cursor[:position][0]] = '.'
  res = find_visited_nodes(grid, cursor).size
  puts "Answer Part 1: #{res}"
end

def find_visited_nodes(grid, cursor)
  visited = Set.new
  begin
    while true
      visited << cursor[:position]
      cursor = move_cursor(grid, cursor)
    end
  rescue StandardError => e
    # p e
  end
  visited
end

def find_starting_cursor(grid)
  grid.each_with_index do |row, y|
    row.each_with_index do |cell, x|
      return { position: [x, y], direction: :up } if cell == '^'
      return { position: [x, y], direction: :right } if cell == '>'
      return { position: [x, y], direction: :down } if cell == 'v'
      return { position: [x, y], direction: :left } if cell == '<'
    end
  end
end

def move_cursor(grid, cursor)
  x = cursor[:position][0]
  y = cursor[:position][1]
  raise StandardError.new("Cursor out of bounds: #{cursor}") if x < 0 || x >= grid[0].size || y < 0 || y >= grid.size
  case cursor[:direction]
  when :up
    raise StandardError.new("Cursor out of bounds: #{cursor}") if y == 0
    grid[y - 1][x] == '#' ? cursor[:direction] = :right : cursor[:position] = [x, y - 1]
  when :right
    raise StandardError.new("Cursor out of bounds: #{cursor}") if x == grid[0].size - 1
    grid[y][x + 1] == '#' ? cursor[:direction] = :down : cursor[:position] = [x + 1, y]
  when :down
    raise StandardError.new("Cursor out of bounds: #{cursor}") if y == grid.size - 1
    grid[y + 1][x] == '#' ? cursor[:direction] = :left : cursor[:position] = [x, y + 1]
  when :left
    raise StandardError.new("Cursor out of bounds: #{cursor}") if x == 0
    grid[y][x - 1] == '#' ? cursor[:direction] = :up : cursor[:position] = [x - 1, y]
  else
    raise ArgumentError "Unknown direction: #{cursor[:direction]}"
  end
  cursor
rescue NoMethodError, ArgumentError
  raise StandardError.new("Cursor out of bounds: #{cursor}")
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  starting_cursor = find_starting_cursor(grid)
  cursor = starting_cursor.dup
  grid[cursor[:position][1]][cursor[:position][0]] = '.'
  visited = find_visited_nodes(grid, cursor)
  loop_count = 0
  visited = visited.delete starting_cursor[:position]
  visited.each_with_index do |v, index|
    # p "#{index + 1} of #{visited.size}: object in #{v}"
    grid[v[1]][v[0]] = '#'
    cursor = starting_cursor.dup
    cursor_log = Set.new
    begin
      while true
        if cursor_log.include?(signature(cursor))
          loop_count += 1
          break
        end
        cursor_log << signature(cursor)
        cursor = move_cursor(grid, cursor)
      end
    rescue StandardError => e
      # p e
      # draw_with_loop grid, cursor_log, cursor, v
    ensure
      grid[v[1]][v[0]] = '.'
    end
  end
  res = loop_count
  puts "Answer Part 2: #{res}"
end

def signature(cursor)
  "#{cursor[:position]}-#{cursor[:direction]}"
end

# (0,0) is top left, x goes right, y goes down
def draw(grid)
  (0...grid.length).each do |y|
    (0...grid[0].length).each do |x|
      print grid[y][x]
    end
    print "\n"
  end
end

def draw_with_loop(grid, cursor_log, cursor, v)
  (0...grid.length).each do |y|
    (0...grid[0].length).each do |x|
      if v == [x, y]
        print 'O'
      elsif cursor_log.include?(signature({ position: [x, y], direction: :up }))
        print 'U'
      elsif cursor_log.include?(signature({ position: [x, y], direction: :right }))
        print 'R'
      elsif cursor_log.include?(signature({ position: [x, y], direction: :down }))
        print 'D'
      elsif cursor_log.include?(signature({ position: [x, y], direction: :left }))
        print 'L'
      else
        print grid[y][x]
      end
    end
    print "\n"
  end
end