#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  stones = input.strip.split(' ').map(&:to_i)
  p "stones: #{stones}"
  25.times do |i|
    stones = blink(stones)
    # p "stones: #{stones}"
    p "#{i}: stones count: #{stones.tally.sort_by { |k, v| k }}"
  end
  res = stones.size
  puts "Answer Part 1: #{res}"
end

def blink(stones)
  new_stones = []
  stones.reverse.each do |stone|
    if stone == 0
      new_stones.unshift(1)
    else
      stone_string = stone.to_s
      if stone_string.size.even?
        left = stone_string.slice(0, stone_string.size / 2).to_i
        right = stone_string.slice(stone_string.size / 2, stone_string.size).to_i
        new_stones.unshift(right)
        new_stones.unshift(left)
      else
        new_stones.unshift stone * 2024
      end
    end
  end
  new_stones
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  stones = input.strip.split(' ').map(&:to_i)
  stones_count = stones.tally
  p "stones: #{stones}"
  p "stones count: #{stones_count}"
  75.times do |i|
    stones_count = blink_count(stones_count)
    # p "#{i}: stones: #{stones_count.sort_by { |k, v| k }}"
  end
  res = stones_count.values.sum
  puts "Answer Part 2: #{res}"
end

def blink_count(stones_count)
  new_count = {}
  stones_count.each do |stone, count|
    # p "stone: #{stone}, count: #{count}"
    if stone == 0
      # existing_one = stones_count[1] || 0
      existing_one = new_count[1] || 0
      new_count[1] = existing_one + count
    else
      stone_string = stone.to_s
      if stone_string.size.even?
        left = stone_string.slice(0, stone_string.size / 2).to_i
        right = stone_string.slice(stone_string.size / 2, stone_string.size).to_i
        # existing_right = stones_count[right] || 0
        # existing_left = stones_count[left] || 0
        if left == right
          new_right = new_count[right] || 0
          new_count[right] = new_right + (2 * count)
        else
          new_right = new_count[right] || 0
          new_left = new_count[left] || 0
          # new_count[right] = new_right + existing_right + count
          new_count[right] = new_right + count
          # new_count[left] = new_left + existing_left + count
          new_count[left] = new_left + count
        end
      else
        new_stone_value = stone * 2024
        existing_stone = new_count[new_stone_value] || 0
        new_count[new_stone_value] = existing_stone + count
      end
    end
  end
  new_count
end

