#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  sequences = input.split("\n")
  p "sequences: #{sequences}"
  current_level0 = 'A'
  sequence_instructions = {}
  sequences.each do |sequence|
    sequence_instructions[sequence] = { level0: [], level1: [], level2: [] }
  end
  sequences.each do |sequence|
    sequence_instructions[sequence][:level0] = sequence.chars.map do |c|
      symbols = mapping_keypad(current_level0, c)
      current_level0 = c
      symbols
    end.join
  end
  p "sequence_instructions: #{sequence_instructions}"
  current_level1 = 'A'
  sequences.each do |sequence|
    sequence_instructions[sequence][:level1] = sequence_instructions[sequence][:level0].chars.map do |c|
      symbols = mapping_directional(current_level1, c)
      current_level1 = c
      symbols
    end.join
  end
  current_level2 = 'A'
  sequences.each do |sequence|
    sequence_instructions[sequence][:level2] = sequence_instructions[sequence][:level1].chars.map do |c|
      symbols = mapping_directional(current_level2, c)
      current_level2 = c
      symbols
    end.join
  end
  complexities = sequence_instructions.map { |k, v| complexity(k, v[:level2]) }
  res = complexities.sum
  puts "Answer Part 1: #{res}"
end

NUMERIC_TRANSFORM = {
  'A,0': "<", 'A,1': "^<<", 'A,2': "<^", 'A,3': "^", 'A,4': "^^<<", 'A,5': "<^^", 'A,6': "^^", 'A,7': "^^^<<", 'A,8': "<^^^", 'A,9': "^^^",
  '0,A': ">", '0,1': "^<", '0,2': "^", '0,3': "^>", '0,4': "^<<", '0,5': "^^", '0,6': "^^>", '0,7': "^^<<", '0,8': "^^^", '0,9': "^^^>",
  '1,A': ">>v", '1,0': ">v", '1,2': ">", '1,3': ">>", '1,4': "^", '1,5': "^>", '1,6': "^>>", '1,7': "^^", '1,8': "^^>", '1,9': "^^>>",
  '2,A': "v>", '2,0': "v", '2,1': "<", '2,3': ">", '2,4': "<^", '2,5': "^", '2,6': "^>", '2,7': "<^^", '2,8': "^^", '2,9': "^^>",
  '3,A': "v", '3,0': "<v", '3,1': "<<", '3,2': "<", '3,4': "<<^", '3,5': "<^", '3,6': "^", '3,7': "<<^^", '3,8': "<^^", '3,9': "^^",
  '4,A': ">>vv", '4,0': ">vv", '4,1': "v", '4,2': "v>", '4,3': "v>>", '4,5': ">", '4,6': ">>", '4,7': "^", '4,8': "^>", '4,9': "^>>",
  '5,A': "vv>", '5,0': "vv", '5,1': "<v", '5,2': "v", '5,3': "v>", '5,4': "<", '5,6': ">", '5,7': "<^", '5,8': "^", '5,9': "^>",
  '6,A': "vv", '6,0': "<vv", '6,1': "<<v", '6,2': "<v", '6,3': "v", '6,4': "<<", '6,5': "<", '6,7': "<<^", '6,8': "<^", '6,9': "^",
  '7,A': ">>vvv", '7,0': ">vvv", '7,1': "vv", '7,2': "vv>", '7,3': "vv>>", '7,4': "v", '7,5': "v>", '7,6': "v>>", '7,8': ">", '7,9': ">>",
  '8,A': "vvv>", '8,0': "vvv", '8,1': "<vv", '8,2': "vv", '8,3': "vv>", '8,4': "<v", '8,5': "v", '8,6': "v>", '8,7': "<", '8,9': ">",
  '9,A': "vvv", '9,0': "<vvv", '9,1': "<<vv", '9,2': "<vv", '9,3': "vv", '9,4': "<<v", '9,5': "<v", '9,6': "v", '9,7': "<<", '9,8': "<",
}

DIRECTIONAL_TRANSFORM = {
  'A,^': "<", 'A,v': "v<", 'A,<': "v<<", 'A,>': "v",
  '^,v': "v", '^,<': "v<", '^,>': "v>", '^,A': ">",
  'v,<': "<", 'v,>': ">", 'v,^': "^", 'v,A': "^>",
  '<,>': ">>", '<,A': ">>^", '<,^': ">^", '<,v': ">",
  '>,<': "<<", '>,A': "^", '>,^': "<^", '>,v': "<",
}

def mapping_keypad(from, to)
  return 'A' if from == to
  NUMERIC_TRANSFORM["#{from},#{to}".to_sym] + 'A'
end

def mapping_directional(from, to)
  return 'A' if from == to
  DIRECTIONAL_TRANSFORM["#{from},#{to}".to_sym] + 'A'
end

def complexity(code, full_sequence)
  full_sequence.size * code.to_i
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  sequences = input.split("\n")
  # p "sequences: #{sequences}"
  current_level0 = 'A'
  sequence_instructions = {}
  sequences.each do |sequence|
    sequence_instructions[sequence] = {}
    25.times { |i| sequence_instructions[sequence]["level#{i}".to_sym] = [] }
  end
  sequences.each do |sequence|
    sequence_instructions[sequence][:level0] = sequence.chars.map do |c|
      symbols = mapping_keypad(current_level0, c)
      current_level0 = c
      symbols
    end.join
  end
  # p "sequence_instructions: #{sequence_instructions}"
  robot_count = 25
  robot_count.times do |i|
    p "i: #{i}"
    current_level_i = 'A'
    sequences.each do |sequence|
      sequence_instructions[sequence]["level#{i+1}".to_sym] = sequence_instructions[sequence]["level#{i}".to_sym].chars.map do |c|
        symbols = mapping_directional(current_level_i, c)
        current_level_i = c
        symbols
      end.join
      p "sequence #{sequence} level#{i+1}: size #{sequence_instructions[sequence]["level#{i+1}".to_sym].size}"
    end
  end
  complexities = sequence_instructions.map { |k, v| complexity(k, v["level#{robot_count}".to_sym]) }
  p "complexities: #{complexities}"
  res = complexities.sum
  puts "Answer Part 2: #{res}"
end

# timing estimates for part2
# robot_count => time to finish
# 10 => 0.19s
# 11 => 0.44s
# 12 => 1.02s
# 13 => 2.63s
# 14 => 6.62s
# 15 => 19.43s
# 16 => 52.48s
# 17 => 137.90s
# 18 => 361.54s
#
# 19 => 1077.67s
# 20 => 2926.67s
# 21 => 7943.67s
# 22 => 21582.67s
# 23 => 58623.67s
# 24 => 159606.67s
# 25 => 434291.67s => 120h