#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  frequencies = input.chars.uniq.reject { |c| c == "." || c == "\n" }
  antinodes = []
  frequencies.each do |f|
    positions = positions_for_symbol grid, f
    antinodes_for_symbol = positions.permutation(2).map do |p1, p2|
      v = [p2[0] - p1[0], p2[1] - p1[1]]
      { symbol: f, position: [p2[0] + v[0], p2[1] + v[1]] }
    end
    antinodes += antinodes_for_symbol
  end
  clamped_antinodes = antinodes.select do |a|
    a[:position][0] >= 0 && a[:position][0] < grid[0].size && a[:position][1] >= 0 && a[:position][1] < grid.size
  end
  res = clamped_antinodes.map { |a| a[:position] }.uniq.size
  puts "Answer Part 1: #{res}"
end

def positions_for_symbol(grid, symbol)
  positions = []
  grid.each_with_index do |row, y|
    row.each_with_index do |cell, x|
      positions << [x, y] if cell == symbol
    end
  end
  positions
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  frequencies = input.chars.uniq.reject { |c| c == "." || c == "\n" }
  antinodes = []
  frequencies.each do |f|
    positions = positions_for_symbol grid, f
    antinodes_for_symbol = []
    positions.permutation(2).map do |p1, p2|
      v = [p2[0] - p1[0], p2[1] - p1[1]]
      outside_grid = false
      multiplier = 0
      while !outside_grid
        candidate = [p2[0] + (v[0] * multiplier), p2[1] + (v[1] * multiplier)]
        outside_grid = candidate[0] < 0 || candidate[0] >= grid[0].size || candidate[1] < 0 || candidate[1] >= grid.size
        antinodes_for_symbol << { symbol: f, position: candidate } unless outside_grid
        multiplier += 1
      end
      { symbol: f, position: [p2[0] + v[0], p2[1] + v[1]] }
    end
    antinodes += antinodes_for_symbol
  end
  res = antinodes.map { |a| a[:position] }.uniq.size
  puts "Answer Part 2: #{res}"
end

