#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  e = positions_for_symbol(grid, 'E').map { |position| { position: position, min_cost: 0, cheats: [] } }.first
  s = positions_for_symbol(grid, 'S').map { |position| { position: position, min_cost: nil, cheats: [] } }.first
  nodes = positions_for_symbol(grid, '.').map do |position|
    { position: position, min_cost: nil, cheats: [] }
  end
  nodes << s
  nodes << e
  p "E: #{e}"
  p "S: #{s}"
  min_cost_for_nodes(nodes, grid, s, e)
  p "costs calculated"
  nodes.each do |node|
    find_cheats node, nodes, grid
  end
  # p "S: #{s}"
  # nodes.each do |node|
  #   p "Node: #{node}"
  # end
  cheats = nodes.map { |node| node[:cheats] }
                .select { |cheats| cheats.count > 0 }
                .reduce([], :+)
                .sort_by { |cheat| cheat[4] }
  # p "Cheats: #{cheats}"
  # p "Cheats tally: #{cheats.map{ |c| c[4] }.tally.sort}"
  res = cheats.count
  puts "Answer Part 1: #{res}"
end

def positions_for_symbol(grid, symbol)
  positions = []
  grid.each_with_index do |row, y|
    row.each_with_index do |cell, x|
      positions << [x, y] if cell == symbol
    end
  end
  positions
end

def min_cost_for_nodes(nodes, grid, s, e)
  fringe = Set.new
  fringe << e[:position]
  until fringe.empty?
    # p "fringe size: #{fringe.size}"
    current_position = pop_from_set fringe
    current = nodes.find { |node| node[:position] == current_position }
    x, y = current[:position]
    [[0, 1], [0, -1], [1, 0], [-1, 0]].each do |dx, dy|
      new_x = x + dx
      new_y = y + dy
      next if new_x < 0 || new_y < 0 || new_x >= grid[0].size || new_y >= grid.size
      candidate = nodes.find { |node| node[:position] == [new_x, new_y] }
      next if candidate.nil?
      if candidate[:min_cost].nil? || candidate[:min_cost] > current[:min_cost] + 1
        candidate[:min_cost] = current[:min_cost] + 1
        fringe << candidate[:position] if candidate[:position] != s[:position]
      end
    end
  end
end

def find_cheats(node, nodes, grid)
  x, y = node[:position]
  [[0, 2], [1, 1], [2, 0], [1, -1], [0, -2], [-1, -1], [-2, 0], [-1, 1]].each do |dx, dy|
    new_x = x + dx
    new_y = y + dy
    next if new_x < 0 || new_y < 0 || new_x >= grid[0].size || new_y >= grid.size
    candidate = nodes.find { |node| node[:position] == [new_x, new_y] }
    next if candidate.nil?
    saved_cost = node[:min_cost] - candidate[:min_cost] - 2
    node[:cheats] << [x, y, dx, dy, saved_cost] if saved_cost >= 100
    # if candidate[:min_cost] < node[:min_cost] - 2
    #
    #   saved_cost = node[:min_cost] - candidate[:min_cost] - 2
    #   node[:cheats] << [x, y, dx, dy, saved_cost] if saved_cost >= 100
    # end
  end
end

def pop_from_set(set)
  element = set.first
  set.delete element
  element
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  grid = input.split("\n").map(&:chars)
  e = positions_for_symbol(grid, 'E').map { |position| { position: position, min_cost: 0, cheats: [] } }.first
  s = positions_for_symbol(grid, 'S').map { |position| { position: position, min_cost: nil, cheats: [] } }.first
  nodes = positions_for_symbol(grid, '.').map do |position|
    { position: position, min_cost: nil, cheats: [] }
  end
  nodes << s
  nodes << e
  p "E: #{e}"
  p "S: #{s}"
  min_cost_for_nodes(nodes, grid, s, e)
  p "costs calculated"
  nodes.each do |node|
    find_new_cheats node, nodes, grid
  end
  # p "S: #{s}"
  # nodes.each do |node|
  #   p "Node: #{node}"
  # end
  cheats = nodes.map { |node| node[:cheats] }
                .select { |cheats| cheats.count > 0 }
                .reduce([], :+)
                .sort_by { |cheat| cheat[4] }
  p "Cheats: #{cheats}"
  # p "Cheats tally: #{cheats.map{ |c| c[4] }.tally.sort}"
  res = cheats.count
  puts "Answer Part 2: #{res}"
end

def find_new_cheats(node, nodes, grid)
  x, y = node[:position]
  [[0, 2], [1, 1], [2, 0], [1, -1], [0, -2], [-1, -1], [-2, 0], [-1, 1], # distance 2
   [0, 3], [1, 2], [2, 1], [3, 0], [2, -1], [1, -2], [0, -3], [-1, -2], [-2, -1], [-3, 0], [-2, 1], [-1, 2], # distance 3
   [0, 4], [1, 3], [2, 2], [3, 1], [4, 0], [3, -1], [2, -2], [1, -3], [0, -4], [-1, -3], [-2, -2], [-3, -1], [-4, 0], [-3, 1], [-2, 2], [-1, 3], # distance 4
   [0, 5], [1, 4], [2, 3], [3, 2], [4, 1], [5, 0], [4, -1], [3, -2], [2, -3], [1, -4], [0, -5], [-1, -4], [-2, -3], [-3, -2], [-4, -1], [-5, 0], [-4, 1], [-3, 2], [-2, 3], [-1, 4], # distance 5
   [0, 6], [1, 5], [2, 4], [3, 3], [4, 2], [5, 1], [6, 0], [5, -1], [4, -2], [3, -3], [2, -4], [1, -5], [0, -6], [-1, -5], [-2, -4], [-3, -3], [-4, -2], [-5, -1], [-6, 0], [-5, 1], [-4, 2], [-3, 3], [-2, 4], [-1, 5], # distance 6
   [0, 7], [1, 6], [2, 5], [3, 4], [4, 3], [5, 2], [6, 1], [7, 0], [6, -1], [5, -2], [4, -3], [3, -4], [2, -5], [1, -6], [0, -7], [-1, -6], [-2, -5], [-3, -4], [-4, -3], [-5, -2], [-6, -1], [-7, 0], [-6, 1], [-5, 2], [-4, 3], [-3, 4], [-2, 5], [-1, 6], # distance 7
   [0, 8], [1, 7], [2, 6], [3, 5], [4, 4], [5, 3], [6, 2], [7, 1], [8, 0], [7, -1], [6, -2], [5, -3], [4, -4], [3, -5], [2, -6], [1, -7], [0, -8], [-1, -7], [-2, -6], [-3, -5], [-4, -4], [-5, -3], [-6, -2], [-7, -1], [-8, 0], [-7, 1], [-6, 2], [-5, 3], [-4, 4], [-3, 5], [-2, 6], [-1, 7], # distance 8
   [0, 9], [1, 8], [2, 7], [3, 6], [4, 5], [5, 4], [6, 3], [7, 2], [8, 1], [9, 0], [8, -1], [7, -2], [6, -3], [5, -4], [4, -5], [3, -6], [2, -7], [1, -8], [0, -9], [-1, -8], [-2, -7], [-3, -6], [-4, -5], [-5, -4], [-6, -3], [-7, -2], [-8, -1], [-9, 0], [-8, 1], [-7, 2], [-6, 3], [-5, 4], [-4, 5], [-3, 6], [-2, 7], [-1, 8], # distance 9
   [0, 10], [1, 9], [2, 8], [3, 7], [4, 6], [5, 5], [6, 4], [7, 3], [8, 2], [9, 1], [10, 0], [9, -1], [8, -2], [7, -3], [6, -4], [5, -5], [4, -6], [3, -7], [2, -8], [1, -9], [0, -10], [-1, -9], [-2, -8], [-3, -7], [-4, -6], [-5, -5], [-6, -4], [-7, -3], [-8, -2], [-9, -1], [-10, 0], [-9, 1], [-8, 2], [-7, 3], [-6, 4], [-5, 5], [-4, 6], [-3, 7], [-2, 8], [-1, 9], # distance 10
   [0, 11], [1, 10], [2, 9], [3, 8], [4, 7], [5, 6], [6, 5], [7, 4], [8, 3], [9, 2], [10, 1], [11, 0], [10, -1], [9, -2], [8, -3], [7, -4], [6, -5], [5, -6], [4, -7], [3, -8], [2, -9], [1, -10], [0, -11], [-1, -10], [-2, -9], [-3, -8], [-4, -7], [-5, -6], [-6, -5], [-7, -4], [-8, -3], [-9, -2], [-10, -1], [-11, 0], [-10, 1], [-9, 2], [-8, 3], [-7, 4], [-6, 5], [-5, 6], [-4, 7], [-3, 8], [-2, 9], [-1, 10], # distance 11
   [0, 12], [1, 11], [2, 10], [3, 9], [4, 8], [5, 7], [6, 6], [7, 5], [8, 4], [9, 3], [10, 2], [11, 1], [12, 0], [11, -1], [10, -2], [9, -3], [8, -4], [7, -5], [6, -6], [5, -7], [4, -8], [3, -9], [2, -10], [1, -11], [0, -12], [-1, -11], [-2, -10], [-3, -9], [-4, -8], [-5, -7], [-6, -6], [-7, -5], [-8, -4], [-9, -3], [-10, -2], [-11, -1], [-12, 0], [-11, 1], [-10, 2], [-9, 3], [-8, 4], [-7, 5], [-6, 6], [-5, 7], [-4, 8], [-3, 9], [-2, 10], [-1, 11], # distance 12
   [0, 13], [1, 12], [2, 11], [3, 10], [4, 9], [5, 8], [6, 7], [7, 6], [8, 5], [9, 4], [10, 3], [11, 2], [12, 1], [13, 0], [12, -1], [11, -2], [10, -3], [9, -4], [8, -5], [7, -6], [6, -7], [5, -8], [4, -9], [3, -10], [2, -11], [1, -12], [0, -13], [-1, -12], [-2, -11], [-3, -10], [-4, -9], [-5, -8], [-6, -7], [-7, -6], [-8, -5], [-9, -4], [-10, -3], [-11, -2], [-12, -1], [-13, 0], [-12, 1], [-11, 2], [-10, 3], [-9, 4], [-8, 5], [-7, 6], [-6, 7], [-5, 8], [-4, 9], [-3, 10], [-2, 11], [-1, 12], # distance 13
   [0, 14], [1, 13], [2, 12], [3, 11], [4, 10], [5, 9], [6, 8], [7, 7], [8, 6], [9, 5], [10, 4], [11, 3], [12, 2], [13, 1], [14, 0], [13, -1], [12, -2], [11, -3], [10, -4], [9, -5], [8, -6], [7, -7], [6, -8], [5, -9], [4, -10], [3, -11], [2, -12], [1, -13], [0, -14], [-1, -13], [-2, -12], [-3, -11], [-4, -10], [-5, -9], [-6, -8], [-7, -7], [-8, -6], [-9, -5], [-10, -4], [-11, -3], [-12, -2], [-13, -1], [-14, 0], [-13, 1], [-12, 2], [-11, 3], [-10, 4], [-9, 5], [-8, 6], [-7, 7], [-6, 8], [-5, 9], [-4, 10], [-3, 11], [-2, 12], [-1, 13], # distance 14
   [0, 15], [1, 14], [2, 13], [3, 12], [4, 11], [5, 10], [6, 9], [7, 8], [8, 7], [9, 6], [10, 5], [11, 4], [12, 3], [13, 2], [14, 1], [15, 0], [14, -1], [13, -2], [12, -3], [11, -4], [10, -5], [9, -6], [8, -7], [7, -8], [6, -9], [5, -10], [4, -11], [3, -12], [2, -13], [1, -14], [0, -15], [-1, -14], [-2, -13], [-3, -12], [-4, -11], [-5, -10], [-6, -9], [-7, -8], [-8, -7], [-9, -6], [-10, -5], [-11, -4], [-12, -3], [-13, -2], [-14, -1], [-15, 0], [-14, 1], [-13, 2], [-12, 3], [-11, 4], [-10, 5], [-9, 6], [-8, 7], [-7, 8], [-6, 9], [-5, 10], [-4, 11], [-3, 12], [-2, 13], [-1, 14], # distance 15
   [0, 16], [1, 15], [2, 14], [3, 13], [4, 12], [5, 11], [6, 10], [7, 9], [8, 8], [9, 7], [10, 6], [11, 5], [12, 4], [13, 3], [14, 2], [15, 1], [16, 0], [15, -1], [14, -2], [13, -3], [12, -4], [11, -5], [10, -6], [9, -7], [8, -8], [7, -9], [6, -10], [5, -11], [4, -12], [3, -13], [2, -14], [1, -15], [0, -16], [-1, -15], [-2, -14], [-3, -13], [-4, -12], [-5, -11], [-6, -10], [-7, -9], [-8, -8], [-9, -7], [-10, -6], [-11, -5], [-12, -4], [-13, -3], [-14, -2], [-15, -1], [-16, 0], [-15, 1], [-14, 2], [-13, 3], [-12, 4], [-11, 5], [-10, 6], [-9, 7], [-8, 8], [-7, 9], [-6, 10], [-5, 11], [-4, 12], [-3, 13], [-2, 14], [-1, 15], # distance 16
   [0, 17], [1, 16], [2, 15], [3, 14], [4, 13], [5, 12], [6, 11], [7, 10], [8, 9], [9, 8], [10, 7], [11, 6], [12, 5], [13, 4], [14, 3], [15, 2], [16, 1], [17, 0], [16, -1], [15, -2], [14, -3], [13, -4], [12, -5], [11, -6], [10, -7], [9, -8], [8, -9], [7, -10], [6, -11], [5, -12], [4, -13], [3, -14], [2, -15], [1, -16], [0, -17], [-1, -16], [-2, -15], [-3, -14], [-4, -13], [-5, -12], [-6, -11], [-7, -10], [-8, -9], [-9, -8], [-10, -7], [-11, -6], [-12, -5], [-13, -4], [-14, -3], [-15, -2], [-16, -1], [-17, 0], [-16, 1], [-15, 2], [-14, 3], [-13, 4], [-12, 5], [-11, 6], [-10, 7], [-9, 8], [-8, 9], [-7, 10], [-6, 11], [-5, 12], [-4, 13], [-3, 14], [-2, 15], [-1, 16], # distance 17
   [0, 18], [1, 17], [2, 16], [3, 15], [4, 14], [5, 13], [6, 12], [7, 11], [8, 10], [9, 9], [10, 8], [11, 7], [12, 6], [13, 5], [14, 4], [15, 3], [16, 2], [17, 1], [18, 0], [17, -1], [16, -2], [15, -3], [14, -4], [13, -5], [12, -6], [11, -7], [10, -8], [9, -9], [8, -10], [7, -11], [6, -12], [5, -13], [4, -14], [3, -15], [2, -16], [1, -17], [0, -18], [-1, -17], [-2, -16], [-3, -15], [-4, -14], [-5, -13], [-6, -12], [-7, -11], [-8, -10], [-9, -9], [-10, -8], [-11, -7], [-12, -6], [-13, -5], [-14, -4], [-15, -3], [-16, -2], [-17, -1], [-18, 0], [-17, 1], [-16, 2], [-15, 3], [-14, 4], [-13, 5], [-12, 6], [-11, 7], [-10, 8], [-9, 9], [-8, 10], [-7, 11], [-6, 12], [-5, 13], [-4, 14], [-3, 15], [-2, 16], [-1, 17], # distance 18
   [0, 19], [1, 18], [2, 17], [3, 16], [4, 15], [5, 14], [6, 13], [7, 12], [8, 11], [9, 10], [10, 9], [11, 8], [12, 7], [13, 6], [14, 5], [15, 4], [16, 3], [17, 2], [18, 1], [19, 0], [18, -1], [17, -2], [16, -3], [15, -4], [14, -5], [13, -6], [12, -7], [11, -8], [10, -9], [9, -10], [8, -11], [7, -12], [6, -13], [5, -14], [4, -15], [3, -16], [2, -17], [1, -18], [0, -19], [-1, -18], [-2, -17], [-3, -16], [-4, -15], [-5, -14], [-6, -13], [-7, -12], [-8, -11], [-9, -10], [-10, -9], [-11, -8], [-12, -7], [-13, -6], [-14, -5], [-15, -4], [-16, -3], [-17, -2], [-18, -1], [-19, 0], [-18, 1], [-17, 2], [-16, 3], [-15, 4], [-14, 5], [-13, 6], [-12, 7], [-11, 8], [-10, 9], [-9, 10], [-8, 11], [-7, 12], [-6, 13], [-5, 14], [-4, 15], [-3, 16], [-2, 17], [-1, 18], # distance 19
   [0, 20], [1, 19], [2, 18], [3, 17], [4, 16], [5, 15], [6, 14], [7, 13], [8, 12], [9, 11], [10, 10], [11, 9], [12, 8], [13, 7], [14, 6], [15, 5], [16, 4], [17, 3], [18, 2], [19, 1], [20, 0], [19, -1], [18, -2], [17, -3], [16, -4], [15, -5], [14, -6], [13, -7], [12, -8], [11, -9], [10, -10], [9, -11], [8, -12], [7, -13], [6, -14], [5, -15], [4, -16], [3, -17], [2, -18], [1, -19], [0, -20], [-1, -19], [-2, -18], [-3, -17], [-4, -16], [-5, -15], [-6, -14], [-7, -13], [-8, -12], [-9, -11], [-10, -10], [-11, -9], [-12, -8], [-13, -7], [-14, -6], [-15, -5], [-16, -4], [-17, -3], [-18, -2], [-19, -1], [-20, 0], [-19, 1], [-18, 2], [-17, 3], [-16, 4], [-15, 5], [-14, 6], [-13, 7], [-12, 8], [-11, 9], [-10, 10], [-9, 11], [-8, 12], [-7, 13], [-6, 14], [-5, 15], [-4, 16], [-3, 17], [-2, 18], [-1, 19], # distance 20
  ].each do |dx, dy|
    new_x = x + dx
    new_y = y + dy
    next if new_x < 0 || new_y < 0 || new_x >= grid[0].size || new_y >= grid.size
    candidate = nodes.find { |node| node[:position] == [new_x, new_y] }
    next if candidate.nil?
    saved_cost = node[:min_cost] - candidate[:min_cost] - 2
    node[:cheats] << [x, y, dx, dy, saved_cost] if saved_cost >= 100
  end
end