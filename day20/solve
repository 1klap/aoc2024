#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = init_grid input
  e = cells_for_symbol(grid, 'E').first
  e[:min_cost] = 0
  min_cost_for_cells(grid, e)
  cheats = cheats_for_cells(grid)
  res = cheats.count
  puts "Answer Part 1: #{res}"
end

def init_grid(input)
  rows = input.strip.split("\n")
  grid = []
  rows.each_with_index do |row, y|
    row.chars.each_with_index do |cell, x|
      grid[y] ||= []
      grid[y][x] = { symbol: cell, position: [x, y], min_cost: nil }
    end
  end
  grid
end

def cells_for_symbol(grid, symbol)
  cells = []
  grid.each do |row|
    row.each do |cell|
      cells << cell if cell[:symbol] == symbol
    end
  end
  cells
end

def min_cost_for_cells(grid, e)
  fringe = Set.new
  fringe << e[:position]
  until fringe.empty?
    x, y = pop_from_set fringe
    current = grid[y][x]
    x, y = current[:position]
    [[0, 1], [0, -1], [1, 0], [-1, 0]].each do |dx, dy|
      new_x = x + dx
      new_y = y + dy
      next if new_x < 0 || new_y < 0 || new_x >= grid[0].size || new_y >= grid.size

      candidate = grid[new_y][new_x]
      next if candidate[:symbol] == '#'

      if candidate[:min_cost].nil? || candidate[:min_cost] > current[:min_cost] + 1
        candidate[:min_cost] = current[:min_cost] + 1
        fringe << candidate[:position] if candidate[:symbol] != 'S'
      end
    end
  end
end

def cheats_for_cells(grid)
  cheats = []
  grid.each do |row|
    row.each do |cell|
      cheats += cheats_for_cell cell, grid if cell[:symbol] != '#'
    end
  end
  cheats
end

def cheats_for_cell(cell, grid)
  cheats = []
  x, y = cell[:position]
  [[0, 2], [1, 1], [2, 0], [1, -1], [0, -2], [-1, -1], [-2, 0], [-1, 1]].each do |dx, dy|
    new_x = x + dx
    new_y = y + dy
    next if new_x < 0 || new_y < 0 || new_x >= grid[0].size || new_y >= grid.size

    candidate = grid[new_y][new_x]
    next if candidate[:symbol] == '#'

    saved_cost = cell[:min_cost] - candidate[:min_cost] - 2
    cheats << [x, y, dx, dy, saved_cost] if saved_cost >= 100
  end
  cheats
end

def pop_from_set(set)
  element = set.first
  set.delete element
  element
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  grid = init_grid input
  e = cells_for_symbol(grid, 'E').first
  e[:min_cost] = 0
  min_cost_for_cells(grid, e)
  # draw_grid grid
  cheats = cheats_for_cells_and_maxdistance(grid, 20)
  res = cheats.count
  puts "Answer Part 2: #{res}"
end

def cheats_for_cells_and_maxdistance(grid, max_distance)
  vectors = []
  (2..max_distance).each do |distance|
    vectors += vectors_for_distance distance
  end
  cheats = []
  grid.each do |row|
    row.each do |cell|
      cheats += cheats_for_cell_and_vectors(cell, grid, vectors) if cell[:symbol] != '#'
    end
  end
  cheats
end

def cheats_for_cell_and_vectors(cell, grid, vectors)
  cheats = []
  x, y = cell[:position]
  vectors.each do |dx, dy|
    new_x = x + dx
    new_y = y + dy
    next if new_x < 0 || new_y < 0 || new_x >= grid[0].size || new_y >= grid.size
    candidate = grid[new_y][new_x]
    next if candidate[:symbol] == '#'

    saved_cost = cell[:min_cost] - candidate[:min_cost] - dx.abs - dy.abs
    cheats << [x, y, dx, dy, saved_cost] if saved_cost >= 100
  end
  cheats
end

def vectors_for_distance(distance)
  vectors = []
  (0..distance).each do |dx|
    dy = distance - dx
    vectors << [dx, dy]
    vectors << [-dx, dy]
    vectors << [dx, -dy]
    vectors << [-dx, -dy]
  end
  vectors.uniq # need this because if dx or dy is 0, then -dx or -dy produces the same vector
end

def draw_grid(grid)
  grid.each do |row|
    row.each do |cell|
      print cell[:min_cost].nil? ? '...' : cell[:min_cost].to_s.rjust(3, ' ')
    end
    puts
  end
end