#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  fs = expand input.strip
  frag fs
  res = checksum fs
  puts "Answer Part 1: #{res}"
end

def expand(disk_map)
  fs = []
  disk_map.chars.each_with_index do |c, i|
    c.to_i.times do
      fs << (i.even? ? (i / 2) : '.')
    end
  end
  fs
end

def frag(fs)
  free_positions = fs.each_with_index.select { |c, _| c == '.' }
  free_positions.each do |e|
    index = e[1]
    last_file_index = fs.rindex { |c| c != '.' } # lookup from the end
    break if !last_file_index || index > last_file_index

    fs[index] = fs[last_file_index]
    fs[last_file_index] = '.'
  end
end

def checksum(fs)
  fs.each_with_index.reject { |c, _| c == '.' }.map { |c, i| c * i }.sum
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  fs_model = map_to_model input.strip
  defrag_model fs_model
  res = checksum expand_model(fs_model)
  puts "Answer Part 2: #{res}"
end

# disk map: 12345
# becomes model (fid: file id, l: length):
# [{:fid=>0, :l=>1}, {:fid=>\".\", :l=>2}, {:fid=>1, :l=>3}, {:fid=>\".\", :l=>4}, {:fid=>2, :l=>5}]
def map_to_model(fs_map)
  fs_map.chars.map.with_index { |c, i| { fid: i.even? ? (i / 2) : '.', l: c.to_i } }
end

def expand_model(model)
  fs = []
  model.each do |c|
    c[:l].times do
      fs << c[:fid]
    end
  end
  fs
end

def defrag_model(model)
  candidates = model.reject { |e| e[:fid] == '.' }.reverse
  candidates.each do |c|
    move_left model, c
  end
end

def move_left(model, candidate)
  candidate_index = model.index candidate
  free_position_index = model.find_index { |e| e[:fid] == '.' && e[:l] >= candidate[:l] }
  return unless free_position_index && free_position_index < candidate_index

  candidate_copy = candidate.dup
  model[candidate_index][:fid] = '.' # clear the candidate
  free_position = model.delete_at free_position_index
  model.insert free_position_index, candidate_copy # insert copy of candidate
  return unless free_position[:l] > candidate[:l]

  # insert a new remaining free position
  model.insert free_position_index + 1, { fid: '.', l: free_position[:l] - candidate[:l] }
end
