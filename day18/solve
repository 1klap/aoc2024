#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  grid = init_grid input_path == 'data/ex1.txt' ? 7 : 71
  corrupted = input.split("\n")
                   .map { |line| line.split(',').map(&:to_i) }
  count = input_path == 'data/ex1.txt' ? 12 : 1034
  corrupted.take(count).each { |x, y| grid[y][x][:corrupted] = true }
  grid[0][0][:min_steps] = 0
  traverse(grid)
  res = grid[grid.size - 1][grid.size - 1][:min_steps]
  puts "Answer Part 1: #{res}"
end

def init_grid(size)
  grid = []
  (0...size).each { |y|
    (0...size).each { |x|
      grid[y] ||= []
      grid[y][x] = { min_steps: nil, visited: false, corrupted: false }
    }
  }
  grid
end

def traverse(grid, start: [0, 0])
  queue = [start]
  until queue.empty?
    x, y = queue.shift
    [[0, 1], [0, -1], [1, 0], [-1, 0]].each do |dx, dy|
      new_x = x + dx
      new_y = y + dy
      unless new_x < 0 || new_y < 0 || new_x >= grid.size || new_y >= grid.size || grid[new_y][new_x][:corrupted]
        candidate = grid[new_y][new_x]
        if candidate[:min_steps].nil? || (candidate[:min_steps] > grid[y][x][:min_steps] + 1)
          candidate[:min_steps] = grid[y][x][:min_steps] + 1
          grid[new_y][new_x] = candidate
          queue << [new_x, new_y]
        end
      end
    end
  end
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  corrupted = input.split("\n")
                   .map { |line| line.split(',').map(&:to_i) }
  corrupted_count = input_path == 'data/ex1.txt' ? 12 : 1034
  blocked = false
  until blocked
    corrupted_count += 1
    grid = init_grid input_path == 'data/ex1.txt' ? 7 : 71
    corrupted.take(corrupted_count).each { |x, y| grid[y][x][:corrupted] = true }
    grid[0][0][:min_steps] = 0
    traverse grid
    blocked = grid[grid.size - 1][grid.size - 1][:min_steps].nil?
  end
  res = corrupted[corrupted_count - 1]
  puts "Answer Part 2: #{res[0]},#{res[1]}"
end

