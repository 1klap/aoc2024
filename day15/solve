#!/usr/bin/env ruby

require_relative '../cmd_line_helper'

END {
  part1_fun = ->(input_path) { part1(input_path) }
  part2_fun = ->(input_path) { part2(input_path) }
  run part1_fun, part2_fun
}

def part1(input_path)
  puts "Part 1 for file: #{input_path}"
  input = File.read(input_path)
  s = input.split("\n\n")
  warehouse = parse_warehouse(s[0])
  moves = s[1].strip.gsub("\n", "").chars
  # draw_warehouse(warehouse)
  moves.each do |move|
    process_move(warehouse, move)
    # draw_warehouse(warehouse)
  end
  res = gps(warehouse)
  puts "Answer Part 1: #{res}"
end

def parse_warehouse(s)
  warehouse = { crates: [], walls: [], current: nil }
  s.split("\n").each_with_index do |line, y|
    line.chars.each_with_index do |c, x|
      case c
      when '#'
        warehouse[:walls] << [x, y]
      when '@'
        warehouse[:current] = [x, y]
      when 'O'
        warehouse[:crates] << [x, y]
      end
    end
  end
  warehouse
end

def draw_warehouse(warehouse)
  width = warehouse[:walls].map { |x, _| x }.max
  height = warehouse[:walls].map { |_, y| y }.max
  (0..height).each do |y|
    (0..width).each do |x|
      if warehouse[:current] == [x, y]
        print '@'
      elsif warehouse[:walls].include?([x, y])
        print '#'
      elsif warehouse[:crates].include?([x, y])
        print 'O'
      else
        print '.'
      end
    end
    puts
  end
  puts
end

def process_move(wh, move)
  dx, dy = case move
           when '^'
             [0, -1]
           when 'v'
             [0, 1]
           when '<'
             [-1, 0]
           when '>'
             [1, 0]
           end
  x, y = wh[:current]
  new_x, new_y = x + dx, y + dy
  if wh[:walls].include?([new_x, new_y])
    return
  end
  if wh[:crates].include?([new_x, new_y])
    pushable_creates = pushable_crates_in_direction(wh, dx, dy)
    return if pushable_creates.empty?

    pushable_creates.each do |crate|
      crate[0] += dx
      crate[1] += dy
    end
  end
  wh[:current] = [new_x, new_y]
end

def pushable_crates_in_direction(wh, dx, dy)
  if dx == -1
    limiting_wall_position = wh[:walls].select { |wall| wall[1] == wh[:current][1] && wall[0] < wh[:current][0] }.map { |wall| wall[0] }.max
    crates = wh[:crates].select { |crate| crate[1] == wh[:current][1] && crate[0] < wh[:current][0] && crate[0] > limiting_wall_position }.sort_by { |crate| -crate[0] }
    chunks = crates.chunk_while { |i, j| i[0] - 1 == j[0] }.to_a
    if chunks.first.map { |e| e[0] }.min > (limiting_wall_position + 1)
      return chunks.first
    else
      return []
    end
  elsif dx == 1
    limiting_wall_position = wh[:walls].select { |wall| wall[1] == wh[:current][1] && wall[0] > wh[:current][0] }.map { |wall| wall[0] }.min
    crates = wh[:crates].select { |crate| crate[1] == wh[:current][1] && crate[0] > wh[:current][0] && crate[0] < limiting_wall_position }.sort_by { |crate| crate[0] }
    chunks = crates.chunk_while { |i, j| i[0] + 1 == j[0] }.to_a
    if chunks.first.map { |e| e[0] }.max < (limiting_wall_position - 1)
      return chunks.first
    else
      return []
    end
  elsif dy == -1
    limiting_wall_position = wh[:walls].select { |wall| wall[0] == wh[:current][0] && wall[1] < wh[:current][1] }.map { |wall| wall[1] }.max
    crates = wh[:crates].select { |crate| crate[0] == wh[:current][0] && crate[1] < wh[:current][1] && crate[1] > limiting_wall_position }.sort_by { |crate| -crate[1] }
    chunks = crates.chunk_while { |i, j| i[1] - 1 == j[1] }.to_a
    if chunks.first.map { |e| e[1] }.min > (limiting_wall_position + 1)
      return chunks.first
    else
      return []
    end
  elsif dy == 1
    limiting_wall_position = wh[:walls].select { |wall| wall[0] == wh[:current][0] && wall[1] > wh[:current][1] }.map { |wall| wall[1] }.min
    crates = wh[:crates].select { |crate| crate[0] == wh[:current][0] && crate[1] > wh[:current][1] && crate[1] < limiting_wall_position }.sort_by { |crate| crate[1] }
    chunks = crates.chunk_while { |i, j| i[1] + 1 == j[1] }.to_a
    if chunks.first.map { |e| e[1] }.max < (limiting_wall_position - 1)
      return chunks.first
    else
      return []
    end
  end
end

def gps(wh)
  wh[:crates].map { |crate| crate[1] * 100 + crate[0] }.sum
end

def part2(input_path)
  puts "Part 2 for file: #{input_path}"
  input = File.read(input_path)
  s = input.split("\n\n")
  warehouse = parse_warehouse(s[0])
  moves = s[1].strip.gsub("\n", "").chars
  scaled_warehouse = scale_warehouse(warehouse)
  # draw_scaled_warehouse(scaled_warehouse)
  moves.each_with_index do |move, i|
    process_scaled_move(scaled_warehouse, move)
    # draw_scaled_warehouse(scaled_warehouse, move, i)
    # sleep 0.05
  end
  res = gps(scaled_warehouse)
  puts "Answer Part 2: #{res}"
end

def scale_warehouse(warehouse)
  scaled_walls = []
  scaled_crates = []
  warehouse[:walls].each do |wall|
    scaled_walls << [wall[0] * 2, wall[1]]
    scaled_walls << [(wall[0] * 2) + 1, wall[1]]
  end
  warehouse[:crates].each do |crate|
    scaled_crates << [crate[0] * 2, crate[1]]
  end
  scaled_current = [warehouse[:current][0] * 2, warehouse[:current][1]]
  { walls: scaled_walls, crates: scaled_crates, current: scaled_current }
end

def draw_scaled_warehouse(warehouse, move = nil, i = nil)
  width = warehouse[:walls].map { |x, _| x }.max
  height = warehouse[:walls].map { |_, y| y }.max
  buff = "##{i} move: #{move}\n"
  (0..height).each do |y|
    (0..width).each do |x|
      if warehouse[:current] == [x, y]
        buff += move ? move : '@'
      elsif warehouse[:walls].include?([x, y])
        buff += '#'
      elsif warehouse[:crates].include?([x, y])
        buff += '['
      elsif warehouse[:crates].include?([x - 1, y])
        buff += ']'
      else
        buff += '.'
      end
    end
    buff += "\n"
  end
  print buff
end

def process_scaled_move(wh, move)
  dx, dy = case move
           when '^'
             [0, -1]
           when 'v'
             [0, 1]
           when '<'
             [-1, 0]
           when '>'
             [1, 0]
           end
  x, y = wh[:current]
  new_x, new_y = x + dx, y + dy
  if wh[:walls].include?([new_x, new_y])
    return
  end
  touching_crate = wh[:crates].select do |crate|
    case move
    when '>'
      crate[0] == new_x && crate[1] == new_y
    when '<'
      crate[0] == (new_x - 1) && crate[1] == new_y
    when '^'
      (crate[0] == new_x || crate[0] == (new_x - 1)) && crate[1] == new_y
    when 'v'
      (crate[0] == new_x || crate[0] == (new_x - 1)) && crate[1] == new_y
    else
      false
    end
  end
  if touching_crate.any?
    if can_push_crate?(wh, touching_crate.first, dx, dy)
      push_crate(wh, touching_crate.first, dx, dy)
    else
      return
    end
  end
  wh[:current] = [new_x, new_y]
end

def can_push_crate?(wh, crate, dx, dy)
  if dx == -1
    if wh[:walls].include?([crate[0] - 1, crate[1]])
      return false
    end
    cant_move_all = connected_crates(wh, crate, dx, dy).any? do |c|
      !can_push_crate? wh, c, dx, dy
    end
    return !cant_move_all
  elsif dx == 1
    if wh[:walls].include?([crate[0] + 2, crate[1]])
      return false
    end
    cant_move_all = connected_crates(wh, crate, dx, dy).any? do |c|
      !can_push_crate? wh, c, dx, dy
    end
    return !cant_move_all
  elsif dy == -1
    if wh[:walls].include?([crate[0], crate[1] - 1]) || wh[:walls].include?([crate[0] + 1, crate[1] - 1])
      return false
    end
    cant_move_all = connected_crates(wh, crate, dx, dy).any? do |c|
      !can_push_crate? wh, c, dx, dy
    end
    return !cant_move_all
  elsif dy == 1
    if wh[:walls].include?([crate[0], crate[1] + 1]) || wh[:walls].include?([crate[0] + 1, crate[1] + 1])
      return false
    end
    cant_move_all = connected_crates(wh, crate, dx, dy).any? do |c|
      !can_push_crate? wh, c, dx, dy
    end
    return !cant_move_all
  end
end

def connected_crates(wh, crate, dx, dy)
  if dx == -1
    left_crate = wh[:crates].select { |c| c[1] == crate[1] && c[0] == crate[0] - 2 }
    if left_crate.empty?
      return []
    else
      return left_crate + connected_crates(wh, left_crate.first, dx, dy)
    end
  elsif dx == 1
    right_crate = wh[:crates].select { |c| c[1] == crate[1] && c[0] == crate[0] + 2 }
    if right_crate.empty?
      return []
    else
      return right_crate + connected_crates(wh, right_crate.first, dx, dy)
    end
  elsif dy == -1
    top_crates = wh[:crates].select { |c| (c[0] == crate[0] || c[0] == crate[0] - 1 || c[0] == crate[0] + 1) && c[1] == crate[1] - 1 }
    if top_crates.empty?
      return []
    else
      r = top_crates
      top_crates.each do |c|
        r += connected_crates(wh, c, dx, dy)
      end
      return r.uniq
    end
  elsif dy == 1
    bottom_crates = wh[:crates].select { |c| (c[0] == crate[0] || c[0] == crate[0] - 1 || c[0] == crate[0] + 1) && c[1] == crate[1] + 1 }
    if bottom_crates.empty?
      return []
    else
      r = bottom_crates
      bottom_crates.each do |c|
        r += connected_crates(wh, c, dx, dy)
      end
      return r.uniq
    end
  end
end

def push_crate(wh, crate, dx, dy)
  connected_crates(wh, crate, dx, dy).each do |c|
    c[0] += dx
    c[1] += dy
  end
  crate[0] += dx
  crate[1] += dy
end